<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( 'wp_enqueue_scripts', 'hello_elementor_child_scripts_styles', 20 );



// Register custom fields for featured image, title, content, and more for multiple custom post types
function register_custom_fields_for_multiple_post_types() {
    // Post types to target
    $post_types = array(
        'home-slider-banner-b',
        'home-bottom-banner-s',
        'home-slider-banner-s',
        'home-bottom-banner-b'
    );

    foreach ($post_types as $post_type) {
        // Register custom field for each post type
        register_rest_field( $post_type, 'featured_image', array(
            'get_callback'    => 'get_featured_image_info_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        register_rest_field( $post_type, 'title', array(
            'get_callback'    => 'get_title_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        register_rest_field( $post_type, 'content', array(
            'get_callback'    => 'get_content_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        // Register custom fields or ACF fields if necessary
        register_rest_field( $post_type, 'custom_field_example', array(
            'get_callback'    => 'get_custom_field_example',
            'update_callback' => null,
            'schema'          => null,
        ));
    }
}
add_action( 'rest_api_init', 'register_custom_fields_for_multiple_post_types' );





// Callback function to get featured image URL and alt text
function get_featured_image_info_for_slider_banner( $object ) {
    $post_id = $object['id'];
    $featured_image_info = array(
        'url' => null,
        'alt' => null,
    );

    if ( has_post_thumbnail( $post_id ) ) {
        $featured_image_info['url'] = get_the_post_thumbnail_url( $post_id, 'full' );
        $image_id = get_post_thumbnail_id( $post_id );
        $featured_image_info['alt'] = get_post_meta( $image_id, '_wp_attachment_image_alt', true );
    }

    return $featured_image_info;
}

// Callback function to get the post title
function get_title_for_slider_banner( $object ) {
    return $object['title']['rendered'];
}

// Callback function to get the post content
function get_content_for_slider_banner( $object ) {
    return $object['content']['rendered'];
}

// Example: Callback function to get a custom field (ACF or regular post meta)
function get_custom_field_example( $object ) {
    $post_id = $object['id'];
    // Replace 'custom_field_name' with the actual custom field name
    return get_post_meta( $post_id, 'custom_field_name', true );
}





// WOOCOMMERCE TOP RATING PRODUCTS
// Hook to REST API initialization
add_action('rest_api_init', 'register_top_products_rating_api');

function register_top_products_rating_api() {
    // Register the custom endpoint with the new namespace 'top-products'
    register_rest_route('top-products/v1', '/products', array(
        'methods' => 'GET',
        'callback' => 'get_top_products_by_rating',
        'permission_callback' => '__return_true',  // Public access for this example
    ));
}

function get_top_products_by_rating(WP_REST_Request $request) {
    // Query the products
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => -1,  // Get all products
    );

    // Fetch products
    $query = new WP_Query($args);

    $products = array();
    foreach ($query->posts as $post) {
        $rating_count = get_post_meta($post->ID, '_wc_rating_count', true);
        
        // Filter products where rating count is greater than 1
        if ($rating_count > 1) {
            $products[] = array(
                'id' => $post->ID,
                'name' => get_the_title($post),
                'rating_count' => $rating_count,
                'average_rating' => get_post_meta($post->ID, '_wc_average_rating', true),
                'permalink' => get_permalink($post),
            );
        }
    }

    // Return the filtered products
    return rest_ensure_response($products);
}







add_filter('woocommerce_rest_prepare_product_object', 'include_acf_fields_in_api_response', 10, 3);

function include_acf_fields_in_api_response($response, $post, $request) {
    $data = $response->get_data();
	$acf_fields = get_fields($response->data['id']);
    $data['acf'] = $acf_fields;
    $response->set_data($data);
    return $response;
}




////////REST API PRODUCTS////////
// Hook into REST API initialization to register custom routes

// Register REST API endpoint
add_action( 'rest_api_init', function() {
    register_rest_route( 'wc-custom/v1', '/products', [
        'methods' => 'GET',
        'callback' => 'get_wc_custom_products',
        'args' => [
            'category' => [
                'required' => false,
            ],
            'search' => [
                'required' => false,
            ],
            'min_price' => [
                'required' => false,
            ],
            'page' => [
                'required' => false,
                'default' => 1, // Default page is 1 if not provided
            ],
            'per_page' => [
                'required' => false,
                'validate_callback' => function( $param, $request, $key ) {
                    // Validate that per_page is a positive integer
                    return is_numeric( $param ) && $param > 0 && $param <= 100; // Limit max per_page to 100
                },
                'default' => 30, // Default per_page is 30 if not provided
            ],
            'reviews_count' => [
                'required' => false,
                'validate_callback' => function( $param, $request, $key ) {
                    // Validate that reviews_count is a valid number
                    return is_numeric( $param );
                },
            ],
        ],
    ]);
});

// Callback function to handle the API request and retrieve product data
function get_wc_custom_products( $data ) {
    // Get the parameters from the request
    $category = $data->get_param( 'category' );
    $search = $data->get_param( 'search' );
    $min_price = $data->get_param( 'min_price' );
    $page = $data->get_param( 'page' );
    $per_page = $data->get_param( 'per_page' );
    $reviews_count = $data->get_param( 'reviews_count' ); // reviews_count filter

    // Arguments for WP_Query to get the products
    $args = array(
        'post_type' => 'product', // Fetch products
        'posts_per_page' => $per_page,   // Number of products per page
        'paged' => $page,                // Pagination: specify the current page
        'post_status' => 'publish', // Only fetch published products
    );

    // If a category is provided, filter by category
    if ( !empty( $category ) ) {
        if ( is_numeric( $category ) ) {
            $args['tax_query'] = array(
                array(
                    'taxonomy' => 'product_cat',
                    'field'    => 'id',
                    'terms'    => $category,
                    'operator' => 'IN',
                ),
            );
        } else {
            $args['tax_query'] = array(
                array(
                    'taxonomy' => 'product_cat',
                    'field'    => 'slug',
                    'terms'    => $category,
                    'operator' => 'IN',
                ),
            );
        }
    }

    // If a search term is provided, filter by the search query
    if ( !empty( $search ) ) {
        $args['s'] = $search; // Add the search parameter to the query
    }

    // If a minimum price is provided, filter by price
    if ( !empty( $min_price ) ) {
        $args['meta_query'] = array(
            array(
                'key' => '_price', // Meta key for product price
                'value' => $min_price,
                'compare' => '>=',
                'type' => 'NUMERIC',
            ),
        );
    }

    // If reviews_count filter is provided, filter by _product_review_count
    if ( !empty( $reviews_count ) ) {
        // Initialize meta_query if it is not already set
        if ( !isset( $args['meta_query'] ) ) {
            $args['meta_query'] = [];
        }

        // Add the filter for _product_review_count
        $args['meta_query'][] = array(
            'key' => '_product_review_count', // The product review count post meta key
            'value' => $reviews_count,
            'compare' => '>=', // Filter for products with reviews greater than or equal to the specified value
            'type' => 'NUMERIC',
        );
    }

    // Run the query
    $query = new WP_Query( $args );
    $products = [];

    if ( $query->have_posts() ) {
        // Loop through each product
        while ( $query->have_posts() ) {
            $query->the_post();
            $product = wc_get_product( get_the_ID() );

            // Get product categories
            $categories = wp_get_post_terms( get_the_ID(), 'product_cat' );
            $category_data = [];

            // Loop through categories and get 'arabic_label' ACF field
            foreach ( $categories as $category ) {
                // Get ACF field 'arabic_label' for the current category
                $arabic_label = get_field( 'arabic_label', 'product_cat_' . $category->term_id );

                $category_data[] = [
                    'id' => $category->term_id,
                    'name' => $category->name,
                    'slug' => $category->slug,
                    'arabic_label' => $arabic_label, // Add arabic_label
                ];
            }

            // Get ACF fields (if any)
            $acf_fields = get_fields( get_the_ID() );

            // Get Yoast SEO data (make sure Yoast SEO plugin is installed)
            $yoast_head_json = function_exists('wpseo_json_ld_output') ? wpseo_json_ld_output() : '';

            // Get post meta (additional post meta fields)
            $post_meta = get_post_meta( get_the_ID() );

            // Get the rating count for the product
            $rating_count = $product->get_rating_count();

            // Get the average rating for the product
            $average_rating = $product->get_average_rating();

            // Add product data to the response array
            $products[] = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'slug' => $product->get_slug(),
                'description' => $product->get_description(),
                'short_description' => $product->get_short_description(),
                'price' => $product->get_price(),
                'regular_price' => $product->get_regular_price(),
                'sale_price' => $product->get_sale_price(),
                'images' => wp_get_attachment_url( $product->get_image_id() ),
                'categories' => $category_data, // Include category data with arabic_label
                'acf' => $acf_fields, // ACF fields
                'yoast_head_json' => $yoast_head_json, // Yoast SEO head JSON
                'post_meta' => $post_meta, // Post meta fields
                'rating_count' => $rating_count, // Add rating count to the response
                'average_rating' => $average_rating, // Add average rating to the response
            ];
        }
        wp_reset_postdata(); // Reset post data to avoid conflicts
    }

    // Get total count of products
    $total_products = $query->found_posts;

    // Prepare response with pagination information
    $response = [
        'products' => $products,
        'pagination' => [
            'total_products' => $total_products,
            'total_pages' => ceil( $total_products / $per_page ),
            'current_page' => $page,
            'per_page' => $per_page,
        ]
    ];

    // Return the product data with pagination info
    return new WP_REST_Response( $response, 200 );
}




// https://admin.wellness4u.in/wp-json/wc-custom/v1/products/?category=flowers&search=&min_price=0&page=1&per_page=30&reviews_count=0


//ADD NEW ADDRESS
// Register custom REST API endpoints for adding, updating, and deleting addresses
add_action( 'rest_api_init', function() {
    // POST: Add a new address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses', [
        'methods'             => 'POST',
        'callback'            => 'add_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        },
        'args' => [
            'address' => [
                'required'            => true,
                'validate_callback'   => function( $param, $request, $key ) {
                    return isset( $param['address_1'] ) && isset( $param['city'] ); // Basic validation for address fields
                }
            ]
        ]
    ]);

    // PUT: Update an existing address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses/(?P<address_id>\d+)', [
        'methods'             => 'PUT',
        'callback'            => 'update_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        },
        'args' => [
            'address' => [
                'required'            => true,
                'validate_callback'   => function( $param, $request, $key ) {
                    return isset( $param['address_1'] ) && isset( $param['city'] ); // Basic validation for address fields
                }
            ]
        ]
    ]);

    // DELETE: Delete an existing address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses/(?P<address_id>\d+)', [
        'methods'             => 'DELETE',
        'callback'            => 'delete_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        }
    ]);
} );

// Callback function to add a new address
function add_customer_address( $data ) {
    $customer_id = $data['id'];  // Get the customer ID from the URL
    $address_data = $data['address'];  // The address data from the request

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Store the new address as user meta (you can store multiple addresses)
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );
    if ( !$existing_addresses ) {
        $existing_addresses = []; // If no addresses exist, initialize as an empty array
    }

    // Generate a new ID for the address
    $new_address_id = $existing_addresses ? max(array_column($existing_addresses, 'id')) + 1 : 1;
    $address_data['id'] = $new_address_id;

    // Add the new address to the array
    $existing_addresses[] = $address_data;

    // Update user meta with the new array of addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'New address added successfully.',
        'address' => $address_data
    ];
}

// Callback function to update an existing address
function update_customer_address( $data ) {
    $customer_id = $data['id']; // Get the customer ID from the URL
    $address_id = $data['address_id']; // Get the address ID from the URL
    $address_data = $data['address']; // The address data from the request

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Get the current list of addresses
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );

    if ( !$existing_addresses ) {
        return new WP_Error( 'no_addresses', 'No addresses found for this customer.', ['status' => 404] );
    }

    // Find the address with the matching ID
    $address_found = false;
    foreach ( $existing_addresses as $index => $address ) {
        if ( $address['id'] == $address_id ) {
            $address_found = true;
            // Update the address with new data
            $existing_addresses[$index] = array_merge($address, $address_data);
            break;
        }
    }

    if ( !$address_found ) {
        return new WP_Error( 'no_address', 'Address not found.', ['status' => 404] );
    }

    // Update the user meta with the modified addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'Address updated successfully.',
        'address' => $address_data
    ];
}

// Callback function to delete an existing address
function delete_customer_address( $data ) {
    $customer_id = $data['id']; // Get the customer ID from the URL
    $address_id = $data['address_id']; // Get the address ID from the URL

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Get the current list of addresses
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );

    if ( !$existing_addresses ) {
        return new WP_Error( 'no_addresses', 'No addresses found for this customer.', ['status' => 404] );
    }

    // Find the address with the matching ID
    $address_found = false;
    foreach ( $existing_addresses as $index => $address ) {
        if ( $address['id'] == $address_id ) {
            $address_found = true;
            // Remove the address
            unset( $existing_addresses[$index] );
            break;
        }
    }

    if ( !$address_found ) {
        return new WP_Error( 'no_address', 'Address not found.', ['status' => 404] );
    }

    // Re-index the array to avoid gaps in keys
    $existing_addresses = array_values( $existing_addresses );

    // Update the user meta with the modified addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'Address deleted successfully.'
    ];
}


//POST /customers/{id}/addresses
//PUT /customers/{id}/addresses/{address_id}
//DELETE /customers/{id}/addresses/{address_id}



// GET ORDER DETAILS BY CUSTOMER ID AND ORDER KEY
add_action('rest_api_init', 'custom_woocommerce_orders_api');

function custom_woocommerce_orders_api() {
    // Register the custom endpoint with the 'custom' namespace
    register_rest_route('custom/v1', '/orders', array(
        'methods' => 'GET', // Define the request method
        'callback' => 'get_woocommerce_orders', // Define the callback function
        'permission_callback' => 'custom_orders_api_permission_check', // Define permission check function
        'args' => array(
            'customer_id' => array(
                'required' => false, // Not required, can be left blank
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure it's a valid number
                }
            ),
            'order_key' => array(
                'required' => false, // Not required, can be left blank
                'validate_callback' => function($param, $request, $key) {
                    return is_string($param); // Ensure it's a valid string
                }
            ),
        ),
    ));
}

// Function to check permissions for the API request
function custom_orders_api_permission_check() {
    return current_user_can('manage_woocommerce'); // Only allow WooCommerce admin access
}

// Function to retrieve WooCommerce orders, with optional customer_id and order_key filters
function get_woocommerce_orders(WP_REST_Request $request) {
    // Get the customer_id and order_key from the request (if provided)
    $customer_id = $request->get_param('customer_id');
    $order_key = $request->get_param('order_key');

    // Set up the query parameters for WooCommerce orders
    $args = array(
        //'status' => 'completed', // You can change this to any status you need
        'limit' => 1000, // Number of orders to fetch
    );

    // If customer_id is provided, filter the orders by customer
    if ($customer_id) {
        $args['customer'] = $customer_id; // Filter orders by customer ID
    }

    // If order_key is provided, filter the orders by order key
    if ($order_key) {
        $args['order_key'] = $order_key; // Filter orders by order key
    }

    // Fetch orders
    $orders = wc_get_orders($args);

    // Prepare the data to return
    $order_data = array();

    foreach ($orders as $order) {
        // Ensure we are working with a WC_Order object
        if (!$order instanceof WC_Order) {
            continue; // Skip if not an instance of WC_Order
        }

        $order_data[] = array(
            'id' => $order->get_id(),
            'parent_id' => $order->get_parent_id(),
            'status' => $order->get_status(),
            'currency' => $order->get_currency(),
            'version' => get_bloginfo('version'),
            'prices_include_tax' => get_option('woocommerce_prices_include_tax'),
            'date_created' => $order->get_date_created()->date('Y-m-d\TH:i:s'),
            'date_modified' => $order->get_date_modified()->date('Y-m-d\TH:i:s'),
            'discount_total' => $order->get_discount_total(),
            'discount_tax' => $order->get_discount_tax(),
            'shipping_total' => $order->get_shipping_total(),
            'shipping_tax' => $order->get_shipping_tax(),
            'cart_tax' => $order->get_cart_tax(),
            'total' => $order->get_total(),
            'total_tax' => $order->get_total_tax(),
            'customer_id' => $order->get_customer_id(),
            'order_key' => $order->get_order_key(),
            'billing' => array(
                'first_name' => $order->get_billing_first_name(),
                'last_name' => $order->get_billing_last_name(),
                'company' => $order->get_billing_company(),
                'address_1' => $order->get_billing_address_1(),
                'address_2' => $order->get_billing_address_2(),
                'city' => $order->get_billing_city(),
                'state' => $order->get_billing_state(),
                'postcode' => $order->get_billing_postcode(),
                'country' => $order->get_billing_country(),
                'email' => $order->get_billing_email(),
                'phone' => $order->get_billing_phone(),
            ),
            'shipping' => array(
                'first_name' => $order->get_shipping_first_name(),
                'last_name' => $order->get_shipping_last_name(),
                'company' => $order->get_shipping_company(),
                'address_1' => $order->get_shipping_address_1(),
                'address_2' => $order->get_shipping_address_2(),
                'city' => $order->get_shipping_city(),
                'state' => $order->get_shipping_state(),
                'postcode' => $order->get_shipping_postcode(),
                'country' => $order->get_shipping_country(),
                'phone' => $order->get_shipping_phone(),
            ),
            'payment_method' => $order->get_payment_method(),
            'payment_method_title' => $order->get_payment_method_title(),
            'transaction_id' => $order->get_transaction_id(),
            'created_via' => $order->get_created_via(),
            'customer_note' => $order->get_customer_note(),
            'date_completed' => $order->get_date_completed() ? $order->get_date_completed()->date('Y-m-d\TH:i:s') : null,
            'date_paid' => $order->get_date_paid() ? $order->get_date_paid()->date('Y-m-d\TH:i:s') : null,
            'number' => $order->get_order_number(),
            'meta_data' => $order->get_meta_data(),
            'line_items' => get_order_items($order), // Get items in the order
            'shipping_lines' => get_shipping_lines($order), // Corrected function name
            'payment_url' => $order->get_checkout_payment_url(),
          
        );
    }

    return rest_ensure_response($order_data);
}


function get_order_items($order) {
    $items = array();

    foreach ($order->get_items() as $item_id => $item) {
        $items[] = array(
            'product_id' => $item->get_product_id(),
            'product_name' => $item->get_name(),
            'quantity' => $item->get_quantity(),
            'total' => $item->get_total(),
            'price' => $item->get_total() / $item->get_quantity(), // Calculate price per item
            'sku' => $item->get_product()->get_sku(),
            'image' => wp_get_attachment_url($item->get_product()->get_image_id()), // Get product image
        );
    }

    return $items;
}

// Function to get shipping lines (Updated method to match WooCommerce's actual method)
function get_shipping_lines($order) {
    $shipping_lines = array();

    foreach ($order->get_shipping_methods() as $shipping_item) {
        $shipping_lines[] = array(
            'id' => $shipping_item->get_id(),
            'method_title' => $shipping_item->get_method_title(),
            'method_id' => $shipping_item->get_method_id(),
            'total' => $shipping_item->get_total(),
            'total_tax' => $shipping_item->get_total_tax(),
        );
    }

    return $shipping_lines;
}


//https://admin.wellness4u.in/wp-json/custom/v1/orders?consumer_secret=cs_48ef9b20fbd7ca0883b3cb20e9cd0d78398f3d03&consumer_key=ck_c10388e89a3e74feeaf32ec349bf9f810f8071bc&order_key=wc_order_xWGJvBgNPo4Dk&customer_id=3



// Hook to initialize the custom REST API endpoint
add_action('rest_api_init', function() {
    register_rest_route('custom/v1', '/returns/', [
        'methods' => 'POST',
        'callback' => 'create_return_post',
        'permission_callback' => '__return_true', // Change this to proper capability check if needed
    ]);
});

// Callback function to create a new "returns" post
function create_return_post(WP_REST_Request $request) {
    // Get the post data from the request
    $title = $request->get_param('title');
    $content = $request->get_param('content');
    $status = $request->get_param('status') ? $request->get_param('status') : 'publish'; // Default status to 'publish'
    $order_id = $request->get_param('order_id'); // ACF field: order_id
    $amount = $request->get_param('amount'); // ACF field: amount
    $transition_id = $request->get_param('transition_id'); // ACF field: transition_id

    // Validate required parameters
    if (empty($title) || empty($content) || empty($order_id) || empty($amount) || empty($transition_id)) {
        return new WP_REST_Response('Missing required parameters.', 400);
    }

    // Create the post array
    $post_data = array(
        'post_title'   => sanitize_text_field($title),
        'post_content' => sanitize_textarea_field($content),
        'post_status'  => sanitize_text_field($status),
        'post_type'    => 'returns', // Custom post type "returns"
    );

    // Insert the post into the database
    $post_id = wp_insert_post($post_data);

    // Check if the post was created successfully
    if (is_wp_error($post_id)) {
        return new WP_REST_Response($post_id->get_error_message(), 500);
    }

    // Save ACF fields
    update_field('order_id', sanitize_text_field($order_id), $post_id);  // Save 'order_id' ACF field
    update_field('amount', sanitize_text_field($amount), $post_id);      // Save 'amount' ACF field
    update_field('transition_id', sanitize_text_field($transition_id), $post_id); // Save 'transition_id' ACF field

    // Return a response with the post ID and success message
    return new WP_REST_Response(array(
        'message' => 'Post created successfully!',
        'post_id' => $post_id
    ), 201);
}

//https://admin.wellness4u.in/wp-json/custom/v1/returns/





function custom_update_order_endpoint() {
    register_rest_route( 'custom/v1', '/update-order/(?P<order_id>\d+)', array(
        'methods' => 'PUT',
        'callback' => 'custom_update_order',  // Callback function to handle the request
        'permission_callback' => function () {
            return current_user_can( 'manage_woocommerce' );  // Ensure the user has permission to update WooCommerce orders
        },
    ));
}

add_action( 'rest_api_init', 'custom_update_order_endpoint' );  // Register the custom endpoint when REST API is initialized



function custom_update_order( $data ) {
    // Get the order ID from the URL parameter
    $order_id = $data['order_id'];

    // Get the order object using WooCommerce function
    $order = wc_get_order( $order_id );

    // If the order is not found, return a 404 error
    if ( !$order ) {
        return new WP_Error('order_not_found', 'Order not found', array('status' => 404));
    }

    // Get the request body (the JSON data sent with the PUT request)
    $body = json_decode( file_get_contents( 'php://input' ), true );

    // Update order status if provided
//     if ( isset( $body['status'] ) ) {
//         $order->update_status( sanitize_text_field( $body['status'] ) );
//     }

    // Update billing address if provided
//     if ( isset( $body['billing'] ) ) {
//         $billing = $body['billing'];
//         $order->set_billing_first_name( sanitize_text_field( $billing['first_name'] ) );
//         $order->set_billing_last_name( sanitize_text_field( $billing['last_name'] ) );
//         $order->set_billing_address_1( sanitize_text_field( $billing['address_1'] ) );
//         $order->set_billing_address_2( sanitize_text_field( $billing['address_2'] ) );
//         $order->set_billing_city( sanitize_text_field( $billing['city'] ) );
//         $order->set_billing_postcode( sanitize_text_field( $billing['postcode'] ) );
//         $order->set_billing_country( sanitize_text_field( $billing['country'] ) );
//         $order->set_billing_email( sanitize_email( $billing['email'] ) );
//     }

    // Update shipping address if provided
//     if ( isset( $body['shipping'] ) ) {
//         $shipping = $body['shipping'];
//         $order->set_shipping_first_name( sanitize_text_field( $shipping['first_name'] ) );
//         $order->set_shipping_last_name( sanitize_text_field( $shipping['last_name'] ) );
//         $order->set_shipping_address_1( sanitize_text_field( $shipping['address_1'] ) );
//         $order->set_shipping_address_2( sanitize_text_field( $shipping['address_2'] ) );
//         $order->set_shipping_city( sanitize_text_field( $shipping['city'] ) );
//         $order->set_shipping_postcode( sanitize_text_field( $shipping['postcode'] ) );
//         $order->set_shipping_country( sanitize_text_field( $shipping['country'] ) );
//     }

    // Update order meta data if provided
    if ( isset( $body['meta_data'] ) ) {
        foreach ( $body['meta_data'] as $meta ) {
            $order->update_meta_data( sanitize_text_field( $meta['key'] ), sanitize_text_field( $meta['value'] ) );
        }
    }

    // Save the updated order
    $order->save();

    // Return the updated order as the response
    return rest_ensure_response( $order );
}




//WISHLIST
// Register a custom REST API route for WooCommerce wishlist
add_action('rest_api_init', function() {
    // Get wishlist items by custom user ID
    register_rest_route('wishlist/v1', '/items', [
        'methods' => 'GET',
        'callback' => 'get_wishlist_items',
        'args' => [
            'user_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure user_id is numeric
                }
            ]
        ],
        'permission_callback' => '__return_true', // Open to all users
    ]);

    // Add an item to the wishlist for a custom user ID
    register_rest_route('wishlist/v1', '/add', [
        'methods' => 'POST',
        'callback' => 'add_to_wishlist',
        'args' => [
            'user_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure user_id is numeric
                }
            ],
            'product_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure product_id is numeric
                }
            ]
        ],
        'permission_callback' => '__return_true', // Open to all users
    ]);

    // Remove an item from the wishlist for a custom user ID
    register_rest_route('wishlist/v1', '/remove', [
        'methods' => 'POST',
        'callback' => 'remove_from_wishlist',
        'args' => [
            'user_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure user_id is numeric
                }
            ],
            'product_id' => [
                'required' => true,
                'validate_callback' => function($param, $request, $key) {
                    return is_numeric($param); // Ensure product_id is numeric
                }
            ]
        ],
        'permission_callback' => '__return_true', // Open to all users
    ]);
});

// Callback to get wishlist items for a specific user
function get_wishlist_items($data) {
    $user_id = $data['user_id'];

    // Get the wishlist items from the user meta for the specified user_id
    $wishlist = get_user_meta($user_id, '_wishlist_items', true);
    return !empty($wishlist) ? $wishlist : [];
}

// Callback to add an item to the wishlist for a specific user
function add_to_wishlist($data) {
    $user_id = $data['user_id'];
    $product_id = $data['product_id'];

    // Get the current wishlist items for the user
    $wishlist = get_user_meta($user_id, '_wishlist_items', true);
    if (!$wishlist) {
        $wishlist = [];
    }

    // Add the product to the wishlist if it's not already there
    if (!in_array($product_id, $wishlist)) {
        $wishlist[] = $product_id;
        update_user_meta($user_id, '_wishlist_items', $wishlist);
    }

    return ['success' => true];
}

// Callback to remove an item from the wishlist for a specific user
function remove_from_wishlist($data) {
    $user_id = $data['user_id'];
    $product_id = $data['product_id'];

    // Get the current wishlist items for the user
    $wishlist = get_user_meta($user_id, '_wishlist_items', true);
    if (empty($wishlist)) {
        return new WP_Error('no_wishlist', 'Wishlist is empty', ['status' => 404]);
    }

    // Remove the product from the wishlist
    if (($key = array_search($product_id, $wishlist)) !== false) {
        unset($wishlist[$key]);
        update_user_meta($user_id, '_wishlist_items', $wishlist);
    }

    return ['success' => true];
}

//GET https://admin.wellness4u.in/wp-json/wishlist/v1/items?user_id=12345
//REMOVE https://admin.wellness4u.in/wp-json/wishlist/v1/remove
//ADD https://admin.wellness4u.in/wp-json/wishlist/v1/add

// {
//   "user_id": 12345,
//   "product_id": 123
// }





//FORGOT PASSWORD: REQUEST

// Register the REST API route for sending the password reset email
function register_password_reset_routes() {
    register_rest_route('password-reset/v1', '/request', array(
        'methods' => 'POST',
        'callback' => 'handle_password_reset_request',
        'permission_callback' => '__return_true', // No authentication required for this endpoint
    ));
}

add_action('rest_api_init', 'register_password_reset_routes');

// Handle the password reset request
function handle_password_reset_request(WP_REST_Request $request) {
    $email = sanitize_email($request->get_param('email'));

    if (!is_email($email)) {
        return new WP_REST_Response(array('message' => 'Invalid email address.'), 400);
    }

    // Check if user exists with this email
    $user = get_user_by('email', $email);

    if (!$user) {
        return new WP_REST_Response(array('message' => 'No user found with this email address.'), 404);
    }

    // Generate a token and its expiration time (1 minute)
    $token = bin2hex(random_bytes(16)); // Generate a random token
    $expires_at = time() + 60; // Token is valid for 1 minute

    // Store the token and expiration time in the user meta
    update_user_meta($user->ID, '_password_reset_token', $token);
    update_user_meta($user->ID, '_password_reset_token_expiry', $expires_at);

    // Send response with token to the frontend
    return new WP_REST_Response(array('message' => 'Token generated successfully.', 'token' => $token, 'email' => $email), 200);
}


///wp-json/password-reset/v1/request


//Verify Token and Reset Password (POST Request)

// Register the REST API route for verifying the token and resetting the password
function register_verify_token_routes() {
    register_rest_route('password-reset/v1', '/reset', array(
        'methods' => 'POST',
        'callback' => 'verify_token_and_reset_password',
        'permission_callback' => '__return_true', // No authentication required for this endpoint
    ));
}

add_action('rest_api_init', 'register_verify_token_routes');

// Handle the token verification and password reset
function verify_token_and_reset_password(WP_REST_Request $request) {
    $email = sanitize_email($request->get_param('email'));
    $token = sanitize_text_field($request->get_param('token'));
    $new_password = sanitize_text_field($request->get_param('newPassword'));

    if (!is_email($email)) {
        return new WP_REST_Response(array('message' => 'Invalid email address.'), 400);
    }

    // Get user by email
    $user = get_user_by('email', $email);

    if (!$user) {
        return new WP_REST_Response(array('message' => 'User not found.'), 404);
    }

    // Get stored token and expiration time
    $stored_token = get_user_meta($user->ID, '_password_reset_token', true);
    $expires_at = get_user_meta($user->ID, '_password_reset_token_expiry', true);

    // Check if token exists and is valid
    if (!$stored_token || $stored_token !== $token) {
        return new WP_REST_Response(array('message' => 'Invalid token.'), 400);
    }

    if ($expires_at < time()) {
        return new WP_REST_Response(array('message' => 'Token expired.'), 400);
    }

    // Reset password
    wp_set_password($new_password, $user->ID);

    // Clear token and expiration
    delete_user_meta($user->ID, '_password_reset_token');
    delete_user_meta($user->ID, '_password_reset_token_expiry');

    return new WP_REST_Response(array('message' => 'Password reset successfully.'), 200);
}


//POST /wp-json/password-reset/v1/reset
