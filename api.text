<?php
/**
 * Theme functions and definitions.
 *
 * For additional information on potential customization options,
 * read the developers' documentation:
 *
 * https://developers.elementor.com/docs/hello-elementor-theme/
 *
 * @package HelloElementorChild
 */

if ( ! defined( 'ABSPATH' ) ) {
	exit; // Exit if accessed directly.
}

define( 'HELLO_ELEMENTOR_CHILD_VERSION', '2.0.0' );

/**
 * Load child theme scripts & styles.
 *
 * @return void
 */
function hello_elementor_child_scripts_styles() {

	wp_enqueue_style(
		'hello-elementor-child-style',
		get_stylesheet_directory_uri() . '/style.css',
		[
			'hello-elementor-theme-style',
		],
		HELLO_ELEMENTOR_CHILD_VERSION
	);

}
add_action( 'wp_enqueue_scripts', 'hello_elementor_child_scripts_styles', 20 );



// Register custom fields for featured image, title, content, and more for multiple custom post types
function register_custom_fields_for_multiple_post_types() {
    // Post types to target
    $post_types = array(
        'home-slider-banner-b',
        'home-bottom-banner-s',
        'home-slider-banner-s',
        'home-bottom-banner-b'
    );

    foreach ($post_types as $post_type) {
        // Register custom field for each post type
        register_rest_field( $post_type, 'featured_image', array(
            'get_callback'    => 'get_featured_image_info_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        register_rest_field( $post_type, 'title', array(
            'get_callback'    => 'get_title_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        register_rest_field( $post_type, 'content', array(
            'get_callback'    => 'get_content_for_slider_banner',
            'update_callback' => null,
            'schema'          => null,
        ));

        // Register custom fields or ACF fields if necessary
        register_rest_field( $post_type, 'custom_field_example', array(
            'get_callback'    => 'get_custom_field_example',
            'update_callback' => null,
            'schema'          => null,
        ));
    }
}
add_action( 'rest_api_init', 'register_custom_fields_for_multiple_post_types' );

// Callback function to get featured image URL and alt text
function get_featured_image_info_for_slider_banner( $object ) {
    $post_id = $object['id'];
    $featured_image_info = array(
        'url' => null,
        'alt' => null,
    );

    if ( has_post_thumbnail( $post_id ) ) {
        $featured_image_info['url'] = get_the_post_thumbnail_url( $post_id, 'full' );
        $image_id = get_post_thumbnail_id( $post_id );
        $featured_image_info['alt'] = get_post_meta( $image_id, '_wp_attachment_image_alt', true );
    }

    return $featured_image_info;
}

// Callback function to get the post title
function get_title_for_slider_banner( $object ) {
    return $object['title']['rendered'];
}

// Callback function to get the post content
function get_content_for_slider_banner( $object ) {
    return $object['content']['rendered'];
}

// Example: Callback function to get a custom field (ACF or regular post meta)
function get_custom_field_example( $object ) {
    $post_id = $object['id'];
    // Replace 'custom_field_name' with the actual custom field name
    return get_post_meta( $post_id, 'custom_field_name', true );
}





// WOOCOMMERCE TOP RATING PRODUCTS
// Hook to REST API initialization
add_action('rest_api_init', 'register_top_products_rating_api');

function register_top_products_rating_api() {
    // Register the custom endpoint with the new namespace 'top-products'
    register_rest_route('top-products/v1', '/products', array(
        'methods' => 'GET',
        'callback' => 'get_top_products_by_rating',
        'permission_callback' => '__return_true',  // Public access for this example
    ));
}

function get_top_products_by_rating(WP_REST_Request $request) {
    // Query the products
    $args = array(
        'post_type' => 'product',
        'posts_per_page' => -1,  // Get all products
    );

    // Fetch products
    $query = new WP_Query($args);

    $products = array();
    foreach ($query->posts as $post) {
        $rating_count = get_post_meta($post->ID, '_wc_rating_count', true);
        
        // Filter products where rating count is greater than 1
        if ($rating_count > 1) {
            $products[] = array(
                'id' => $post->ID,
                'name' => get_the_title($post),
                'rating_count' => $rating_count,
                'average_rating' => get_post_meta($post->ID, '_wc_average_rating', true),
                'permalink' => get_permalink($post),
            );
        }
    }

    // Return the filtered products
    return rest_ensure_response($products);
}







add_filter('woocommerce_rest_prepare_product_object', 'include_acf_fields_in_api_response', 10, 3);

function include_acf_fields_in_api_response($response, $post, $request) {
    $data = $response->get_data();
	$acf_fields = get_fields($response->data['id']);
    $data['acf'] = $acf_fields;
    $response->set_data($data);
    return $response;
}




////////REST API PRODUCTS////////
// Hook into REST API initialization to register custom routes

// Register REST API endpoint
add_action( 'rest_api_init', function() {
    register_rest_route( 'wc-custom/v1', '/products', [
        'methods' => 'GET',
        'callback' => 'get_wc_custom_products',
        'args' => [
            'category' => [
                'required' => false,
            ],
            'search' => [
                'required' => false,
            ],
            'min_price' => [
                'required' => false,
            ],
            'page' => [
                'required' => false,
                'default' => 1, // Default page is 1 if not provided
            ],
            'per_page' => [
                'required' => false,
                'validate_callback' => function( $param, $request, $key ) {
                    // Validate that per_page is a positive integer
                    return is_numeric( $param ) && $param > 0 && $param <= 100; // Limit max per_page to 100
                },
                'default' => 30, // Default per_page is 30 if not provided
            ],
            'reviews_count' => [
                'required' => false,
                'validate_callback' => function( $param, $request, $key ) {
                    // Validate that reviews_count is a valid number
                    return is_numeric( $param );
                },
            ],
        ],
    ]);
});

// Callback function to handle the API request and retrieve product data
function get_wc_custom_products( $data ) {
    // Get the parameters from the request
    $category = $data->get_param( 'category' );
    $search = $data->get_param( 'search' );
    $min_price = $data->get_param( 'min_price' );
    $page = $data->get_param( 'page' );
    $per_page = $data->get_param( 'per_page' );
    $reviews_count = $data->get_param( 'reviews_count' ); // reviews_count filter

    // Arguments for WP_Query to get the products
    $args = array(
        'post_type' => 'product', // Fetch products
        'posts_per_page' => $per_page,   // Number of products per page
        'paged' => $page,                // Pagination: specify the current page
        'post_status' => 'publish', // Only fetch published products
    );

    // If a category is provided, filter by category
    if ( !empty( $category ) ) {
        if ( is_numeric( $category ) ) {
            $args['tax_query'] = array(
                array(
                    'taxonomy' => 'product_cat',
                    'field'    => 'id',
                    'terms'    => $category,
                    'operator' => 'IN',
                ),
            );
        } else {
            $args['tax_query'] = array(
                array(
                    'taxonomy' => 'product_cat',
                    'field'    => 'slug',
                    'terms'    => $category,
                    'operator' => 'IN',
                ),
            );
        }
    }

    // If a search term is provided, filter by the search query
    if ( !empty( $search ) ) {
        $args['s'] = $search; // Add the search parameter to the query
    }

    // If a minimum price is provided, filter by price
    if ( !empty( $min_price ) ) {
        $args['meta_query'] = array(
            array(
                'key' => '_price', // Meta key for product price
                'value' => $min_price,
                'compare' => '>=',
                'type' => 'NUMERIC',
            ),
        );
    }

    // If reviews_count filter is provided, filter by _product_review_count
    if ( !empty( $reviews_count ) ) {
        // Initialize meta_query if it is not already set
        if ( !isset( $args['meta_query'] ) ) {
            $args['meta_query'] = [];
        }

        // Add the filter for _product_review_count
        $args['meta_query'][] = array(
            'key' => '_product_review_count', // The product review count post meta key
            'value' => $reviews_count,
            'compare' => '>=', // Filter for products with reviews greater than or equal to the specified value
            'type' => 'NUMERIC',
        );
    }

    // Run the query
    $query = new WP_Query( $args );
    $products = [];

    if ( $query->have_posts() ) {
        // Loop through each product
        while ( $query->have_posts() ) {
            $query->the_post();
            $product = wc_get_product( get_the_ID() );

            // Get product categories
            $categories = wp_get_post_terms( get_the_ID(), 'product_cat' );
            $category_data = [];

            // Loop through categories and get 'arabic_label' ACF field
            foreach ( $categories as $category ) {
                // Get ACF field 'arabic_label' for the current category
                $arabic_label = get_field( 'arabic_label', 'product_cat_' . $category->term_id );

                $category_data[] = [
                    'id' => $category->term_id,
                    'name' => $category->name,
                    'slug' => $category->slug,
                    'arabic_label' => $arabic_label, // Add arabic_label
                ];
            }

            // Get ACF fields (if any)
            $acf_fields = get_fields( get_the_ID() );

            // Get Yoast SEO data (make sure Yoast SEO plugin is installed)
            $yoast_head_json = function_exists('wpseo_json_ld_output') ? wpseo_json_ld_output() : '';

            // Get post meta (additional post meta fields)
            $post_meta = get_post_meta( get_the_ID() );

            // Get the rating count for the product
            $rating_count = $product->get_rating_count();

            // Get the average rating for the product
            $average_rating = $product->get_average_rating();

            // Add product data to the response array
            $products[] = [
                'id' => $product->get_id(),
                'name' => $product->get_name(),
                'slug' => $product->get_slug(),
                'description' => $product->get_description(),
                'short_description' => $product->get_short_description(),
                'price' => $product->get_price(),
                'regular_price' => $product->get_regular_price(),
                'sale_price' => $product->get_sale_price(),
                'images' => wp_get_attachment_url( $product->get_image_id() ),
                'categories' => $category_data, // Include category data with arabic_label
                'acf' => $acf_fields, // ACF fields
                'yoast_head_json' => $yoast_head_json, // Yoast SEO head JSON
                'post_meta' => $post_meta, // Post meta fields
                'rating_count' => $rating_count, // Add rating count to the response
                'average_rating' => $average_rating, // Add average rating to the response
            ];
        }
        wp_reset_postdata(); // Reset post data to avoid conflicts
    }

    // Get total count of products
    $total_products = $query->found_posts;

    // Prepare response with pagination information
    $response = [
        'products' => $products,
        'pagination' => [
            'total_products' => $total_products,
            'total_pages' => ceil( $total_products / $per_page ),
            'current_page' => $page,
            'per_page' => $per_page,
        ]
    ];

    // Return the product data with pagination info
    return new WP_REST_Response( $response, 200 );
}




// https://admin.wellness4u.in/wp-json/wc-custom/v1/products/?category=flowers&search=&min_price=0&page=1&per_page=30&reviews_count=0


//ADD NEW ADDRESS
// Register custom REST API endpoints for adding, updating, and deleting addresses
add_action( 'rest_api_init', function() {
    // POST: Add a new address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses', [
        'methods'             => 'POST',
        'callback'            => 'add_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        },
        'args' => [
            'address' => [
                'required'            => true,
                'validate_callback'   => function( $param, $request, $key ) {
                    return isset( $param['address_1'] ) && isset( $param['city'] ); // Basic validation for address fields
                }
            ]
        ]
    ]);

    // PUT: Update an existing address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses/(?P<address_id>\d+)', [
        'methods'             => 'PUT',
        'callback'            => 'update_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        },
        'args' => [
            'address' => [
                'required'            => true,
                'validate_callback'   => function( $param, $request, $key ) {
                    return isset( $param['address_1'] ) && isset( $param['city'] ); // Basic validation for address fields
                }
            ]
        ]
    ]);

    // DELETE: Delete an existing address
    register_rest_route( 'wc/v3', '/customers/(?P<id>\d+)/addresses/(?P<address_id>\d+)', [
        'methods'             => 'DELETE',
        'callback'            => 'delete_customer_address',
        'permission_callback' => function() {
            return current_user_can( 'edit_others_posts' ); // Customize permission callback as needed
        }
    ]);
} );

// Callback function to add a new address
function add_customer_address( $data ) {
    $customer_id = $data['id'];  // Get the customer ID from the URL
    $address_data = $data['address'];  // The address data from the request

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Store the new address as user meta (you can store multiple addresses)
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );
    if ( !$existing_addresses ) {
        $existing_addresses = []; // If no addresses exist, initialize as an empty array
    }

    // Generate a new ID for the address
    $new_address_id = $existing_addresses ? max(array_column($existing_addresses, 'id')) + 1 : 1;
    $address_data['id'] = $new_address_id;

    // Add the new address to the array
    $existing_addresses[] = $address_data;

    // Update user meta with the new array of addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'New address added successfully.',
        'address' => $address_data
    ];
}

// Callback function to update an existing address
function update_customer_address( $data ) {
    $customer_id = $data['id']; // Get the customer ID from the URL
    $address_id = $data['address_id']; // Get the address ID from the URL
    $address_data = $data['address']; // The address data from the request

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Get the current list of addresses
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );

    if ( !$existing_addresses ) {
        return new WP_Error( 'no_addresses', 'No addresses found for this customer.', ['status' => 404] );
    }

    // Find the address with the matching ID
    $address_found = false;
    foreach ( $existing_addresses as $index => $address ) {
        if ( $address['id'] == $address_id ) {
            $address_found = true;
            // Update the address with new data
            $existing_addresses[$index] = array_merge($address, $address_data);
            break;
        }
    }

    if ( !$address_found ) {
        return new WP_Error( 'no_address', 'Address not found.', ['status' => 404] );
    }

    // Update the user meta with the modified addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'Address updated successfully.',
        'address' => $address_data
    ];
}

// Callback function to delete an existing address
function delete_customer_address( $data ) {
    $customer_id = $data['id']; // Get the customer ID from the URL
    $address_id = $data['address_id']; // Get the address ID from the URL

    // Validate that the customer exists
    if ( !get_user_by( 'id', $customer_id ) ) {
        return new WP_Error( 'no_customer', 'Customer not found.', ['status' => 404] );
    }

    // Get the current list of addresses
    $existing_addresses = get_user_meta( $customer_id, 'additional_addresses', true );

    if ( !$existing_addresses ) {
        return new WP_Error( 'no_addresses', 'No addresses found for this customer.', ['status' => 404] );
    }

    // Find the address with the matching ID
    $address_found = false;
    foreach ( $existing_addresses as $index => $address ) {
        if ( $address['id'] == $address_id ) {
            $address_found = true;
            // Remove the address
            unset( $existing_addresses[$index] );
            break;
        }
    }

    if ( !$address_found ) {
        return new WP_Error( 'no_address', 'Address not found.', ['status' => 404] );
    }

    // Re-index the array to avoid gaps in keys
    $existing_addresses = array_values( $existing_addresses );

    // Update the user meta with the modified addresses
    update_user_meta( $customer_id, 'additional_addresses', $existing_addresses );

    return [
        'success' => true,
        'message' => 'Address deleted successfully.'
    ];
}


//POST /customers/{id}/addresses
//PUT /customers/{id}/addresses/{address_id}
//DELETE /customers/{id}/addresses/{address_id}
